{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marcus/Documents/Prime/tier2/secure-submarine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchSecrets),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(secretsSaga);\n\nimport axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects'; // worker Saga: will be fired on \"FETCH_SECRETS\" actions\n\nfunction fetchSecrets() {\n  var config, response;\n  return _regeneratorRuntime.wrap(function fetchSecrets$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          config = {\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            withCredentials: true\n          };\n          _context.next = 4;\n          return axios.get('api/secrets', config);\n\n        case 4:\n          response = _context.sent;\n          _context.next = 7;\n          return put({\n            type: 'SET_SECRETS',\n            payload: response.data\n          });\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Secrets get request failed', _context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction secretsSaga() {\n  return _regeneratorRuntime.wrap(function secretsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('FETCH_SECRETS', fetchSecrets);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default secretsSaga;","map":{"version":3,"sources":["/Users/marcus/Documents/Prime/tier2/secure-submarine/src/redux/sagas/secretsSaga.js"],"names":["fetchSecrets","secretsSaga","axios","put","takeLatest","config","headers","withCredentials","get","response","type","payload","data","console","log"],"mappings":";;;;yBAIUA,Y;;;yBAeAC,W;;AAnBV,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,oBAAhC,C,CAEA;;AACA,SAAUJ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUK,UAAAA,MAFV,GAEmB;AACbC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aADI;AAEbC,YAAAA,eAAe,EAAE;AAFJ,WAFnB;AAAA;AAOqB,iBAAML,KAAK,CAACM,GAAN,CAAU,aAAV,EAAyBH,MAAzB,CAAN;;AAPrB;AAOUI,UAAAA,QAPV;AAAA;AASI,iBAAMN,GAAG,CAAC;AAAEO,YAAAA,IAAI,EAAE,aAAR;AAAuBC,YAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,WAAD,CAAT;;AATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWIC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUb,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,UAAU,CAAC,eAAD,EAAkBJ,YAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,WAAf","sourcesContent":["import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_SECRETS\" actions\nfunction* fetchSecrets() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n    \n    const response = yield axios.get('api/secrets', config);\n    \n    yield put({ type: 'SET_SECRETS', payload: response.data });\n  } catch (error) {\n    console.log('Secrets get request failed', error);\n  }\n}\n\nfunction* secretsSaga() {\n  yield takeLatest('FETCH_SECRETS', fetchSecrets);\n}\n\nexport default secretsSaga;\n"]},"metadata":{},"sourceType":"module"}